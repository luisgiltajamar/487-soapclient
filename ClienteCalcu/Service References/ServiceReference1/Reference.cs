//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteCalcu.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultadoSuma", Namespace="http://schemas.datacontract.org/2004/07/ServicioCalculadora")]
    [System.SerializableAttribute()]
    public partial class ResultadoSuma : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OperandosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ResultadoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Operandos {
            get {
                return this.OperandosField;
            }
            set {
                if ((this.OperandosField.Equals(value) != true)) {
                    this.OperandosField = value;
                    this.RaisePropertyChanged("Operandos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Resultado {
            get {
                return this.ResultadoField;
            }
            set {
                if ((this.ResultadoField.Equals(value) != true)) {
                    this.ResultadoField = value;
                    this.RaisePropertyChanged("Resultado");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorDivision", Namespace="http://schemas.datacontract.org/2004/07/ServicioCalculadora")]
    [System.SerializableAttribute()]
    public partial class ErrorDivision : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescripcionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DivisorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descripcion {
            get {
                return this.DescripcionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescripcionField, value) != true)) {
                    this.DescripcionField = value;
                    this.RaisePropertyChanged("Descripcion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Divisor {
            get {
                return this.DivisorField;
            }
            set {
                if ((this.DivisorField.Equals(value) != true)) {
                    this.DivisorField = value;
                    this.RaisePropertyChanged("Divisor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalculadora")]
    public interface ICalculadora {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Sumar", ReplyAction="http://tempuri.org/ICalculadora/SumarResponse")]
        double Sumar(double op1, double op2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Sumar", ReplyAction="http://tempuri.org/ICalculadora/SumarResponse")]
        System.Threading.Tasks.Task<double> SumarAsync(double op1, double op2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Restar", ReplyAction="http://tempuri.org/ICalculadora/RestarResponse")]
        double Restar(double op1, double op2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Restar", ReplyAction="http://tempuri.org/ICalculadora/RestarResponse")]
        System.Threading.Tasks.Task<double> RestarAsync(double op1, double op2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/SumaCompleja", ReplyAction="http://tempuri.org/ICalculadora/SumaComplejaResponse")]
        ClienteCalcu.ServiceReference1.ResultadoSuma SumaCompleja(double[] op);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/SumaCompleja", ReplyAction="http://tempuri.org/ICalculadora/SumaComplejaResponse")]
        System.Threading.Tasks.Task<ClienteCalcu.ServiceReference1.ResultadoSuma> SumaComplejaAsync(double[] op);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Dividir", ReplyAction="http://tempuri.org/ICalculadora/DividirResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClienteCalcu.ServiceReference1.ErrorDivision), Action="http://tempuri.org/ICalculadora/DividirErrorDivisionFault", Name="ErrorDivision", Namespace="http://schemas.datacontract.org/2004/07/ServicioCalculadora")]
        double Dividir(double op1, double op2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Dividir", ReplyAction="http://tempuri.org/ICalculadora/DividirResponse")]
        System.Threading.Tasks.Task<double> DividirAsync(double op1, double op2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculadoraChannel : ClienteCalcu.ServiceReference1.ICalculadora, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculadoraClient : System.ServiceModel.ClientBase<ClienteCalcu.ServiceReference1.ICalculadora>, ClienteCalcu.ServiceReference1.ICalculadora {
        
        public CalculadoraClient() {
        }
        
        public CalculadoraClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculadoraClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Sumar(double op1, double op2) {
            return base.Channel.Sumar(op1, op2);
        }
        
        public System.Threading.Tasks.Task<double> SumarAsync(double op1, double op2) {
            return base.Channel.SumarAsync(op1, op2);
        }
        
        public double Restar(double op1, double op2) {
            return base.Channel.Restar(op1, op2);
        }
        
        public System.Threading.Tasks.Task<double> RestarAsync(double op1, double op2) {
            return base.Channel.RestarAsync(op1, op2);
        }
        
        public ClienteCalcu.ServiceReference1.ResultadoSuma SumaCompleja(double[] op) {
            return base.Channel.SumaCompleja(op);
        }
        
        public System.Threading.Tasks.Task<ClienteCalcu.ServiceReference1.ResultadoSuma> SumaComplejaAsync(double[] op) {
            return base.Channel.SumaComplejaAsync(op);
        }
        
        public double Dividir(double op1, double op2) {
            return base.Channel.Dividir(op1, op2);
        }
        
        public System.Threading.Tasks.Task<double> DividirAsync(double op1, double op2) {
            return base.Channel.DividirAsync(op1, op2);
        }
    }
}
